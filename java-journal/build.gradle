//gradle script 
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2")
    }
}

apply plugin: "org.sonarqube"
apply plugin: "java"
apply plugin: "war"
apply plugin: "eclipse"
apply plugin: 'spring-boot'
apply plugin: 'jacoco'

//project 
jar {
    baseName = 'jj-spring-boot'
    version =  '0.1.0'
}

//repo and dependencies
repositories{  jcenter() }

dependencies{
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    
    runtime('mysql:mysql-connector-java')
    
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.security:spring-security-test:4.0.4.RELEASE'
    testCompile 'org.testng:testng:6.9.10'
    testCompile 'org.meanbean:meanbean:2.0.3'
    testCompile 'org.skyscreamer:jsonassert:1.3.0'
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    
    testCompile files('libs/TestUtil.jar')
    
    testRuntime 'com.h2database:h2:1.4.191'
    
    //sonar
    testRuntime 'org.codehaus.sonar-plugins.java:sonar-jacoco-listeners:3.2'
    compile 'org.springframework.security:spring-security-ldap:4.0.4.RELEASE'
    compile 'org.springframework.security:spring-security-openid:4.0.4.RELEASE'
    
}


//exclusions
configurations.all {
        exclude module: 'spring-boot-starter-logging'
        //exclude module: 'slf4j-log4j12'
        //exclude module: 'logback-core'
}

//sonar
sonarqube {
    properties {
        //property "sonar.groovy.jacoco.reportPath", "$buildDir/jacoco/test.exec" //TODO: Could be set by default when Groovy plugin is detected
        //property "sonar.junit.reportsPath", "$projectDir/test-output/junitreports/"
        property "sonar.tests","$projectDir/src/itest/java,$projectDir/src/test/java"
        property "sonar.jacoco.reportPath", "${buildDir}/jacoco/UTest.exec"
//        property "sonar.jacoco.itReportPath","${buildDir}/jacoco/ITest.exec"
        property "sonar.jacoco.excludes","**/*Config.java"
        property "sonar.exclusions","**/*Config.java"
    }
}


//test




test{
    jacoco {
        //destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        destinationFile = file("$buildDir/jacoco/UTest.exec")
        //classDumpFile = file("$buildDir/jacoco/classpathdumps")
        classDumpFile = file("$buildDir/classes/test")
     }
}





//integration tests

configurations {
    itestCompile.extendsFrom testCompile
    itestRuntime.extendsFrom testRuntime
}


sourceSets {
    itest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir file('src/itest/java')
        
    }
    itest {
        resources.srcDir file('src/itest/resources')
    }
}



task itest(type: Test) {
    useTestNG()
    jacoco {
        //destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        destinationFile = file("$buildDir/jacoco/ITest.exec")
        //classDumpFile = file("$buildDir/jacoco/classpathdumps")
        classDumpFile = file("$buildDir/classes/itest")
     }
    testClassesDir = sourceSets.itest.output.classesDir
    classpath = sourceSets.itest.runtimeClasspath
    
    // This is not needed, but I like to see which tests have run
    testLogging { events "passed", "skipped", "failed" }
}

//test completely
test{
    useTestNG{
        suites 'testng.xml'
    }
    classpath = sourceSets.itest.runtimeClasspath
}

//reporting
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
    executionData = files(["${buildDir}/jacoco/UTest.exec","${buildDir}/jacoco/ITest.exec"])
    
}



//deployment
task deployToTomcat(type: Copy) {
    from war.archivePath
    into "E:/noinstalls-x64/apache-tomcat-8.0.32/webapps"
}

task deployToTomEE(type: Copy) {
    from war.archivePath
    into "E:/noinstalls-x64/apache-tomee-jaxrs-1.7.4/webapps"
}

task undeployFromTomcat(type: Delete) {
    delete ("E:/noinstalls-x64/apache-tomcat-8.0.32/webapps/" + war.archiveName)
}

task cleanFromTomcat(type: Delete) {
    delete ("E:/noinstalls-x64/apache-tomcat-8.0.32/webapps/" + war.baseName)
    delete ("E:/noinstalls-x64/apache-tomcat-8.0.32/work/Catalina/localhost/" + war.baseName)
}

task cleanTomcatLogs(type: Delete) {
    delete ("E:/noinstalls-x64/apache-tomcat-8.0.32/logs/catalina.2016-03-10.log")
    delete ("E:/noinstalls-x64/apache-tomcat-8.0.32/logs/java-journal.log")
}

task undeployFromTomEE(type: Delete) {
    delete ("E:/noinstalls-x64/apache-tomee-jaxrs-1.7.4/webapps/"+war.archiveName)
}
